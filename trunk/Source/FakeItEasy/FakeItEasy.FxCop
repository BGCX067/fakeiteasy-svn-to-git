<?xml version="1.0" encoding="utf-8"?>
<FxCopProject Version="1.36" Name="My FxCop Project">
 <ProjectOptions>
  <SharedProject>True</SharedProject>
  <Stylesheet Apply="False">c:\program files (x86)\microsoft fxcop 1.36\Xml\FxCopReport.xsl</Stylesheet>
  <SaveMessages>
   <Project Status="Active, Excluded" NewOnly="False" />
   <Report Status="Active" NewOnly="False" />
  </SaveMessages>
  <ProjectFile Compress="True" DefaultTargetCheck="True" DefaultRuleCheck="True" SaveByRuleGroup="" Deterministic="True" />
  <EnableMultithreadedLoad>True</EnableMultithreadedLoad>
  <EnableMultithreadedAnalysis>True</EnableMultithreadedAnalysis>
  <SourceLookup>True</SourceLookup>
  <AnalysisExceptionsThreshold>10</AnalysisExceptionsThreshold>
  <RuleExceptionsThreshold>1</RuleExceptionsThreshold>
  <Spelling Locale="en-US" />
  <OverrideRuleVisibilities>False</OverrideRuleVisibilities>
  <CustomDictionaries SearchFxCopDir="True" SearchUserProfile="True" SearchProjectDir="True" />
  <SearchGlobalAssemblyCache>False</SearchGlobalAssemblyCache>
  <DeadlockDetectionTimeout>120</DeadlockDetectionTimeout>
  <IgnoreGeneratedCode>False</IgnoreGeneratedCode>
 </ProjectOptions>
 <Targets>
  <Target Name="$(ProjectDir)/bin/Debug/FakeItEasy.dll" Analyze="True" AnalyzeAllChildren="True" />
 </Targets>
 <Rules>
  <RuleFiles>
   <RuleFile Name="$(FxCopDir)\Rules\DesignRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\GlobalizationRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\InteroperabilityRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\MobilityRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\NamingRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\PerformanceRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\PortabilityRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\SecurityRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\UsageRules.dll" Enabled="True" AllRulesEnabled="True" />
  </RuleFiles>
  <Groups />
  <Settings />
 </Rules>
 <FxCopReport Version="1.36">
  <Namespaces>
   <Namespace Name="FakeItEasy.Assertion">
    <Messages>
     <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Created="2009-12-25 00:06:38Z">
      <Issue>
       <Item>FakeItEasy.Assertion</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="FakeItEasy.ExtensionSyntax">
    <Messages>
     <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Created="2009-12-25 00:06:38Z">
      <Issue>
       <Item>FakeItEasy.ExtensionSyntax</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="FakeItEasy.ExtensionSyntax.Full">
    <Messages>
     <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Excluded" Created="2009-09-07 22:24:20Z">
      <Issue>
       <Item>FakeItEasy.ExtensionSyntax.Full</Item>
      </Issue>
      <Notes>
       <User Name="Patrik">
        <Note Id="0" />
       </User>
      </Notes>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="FakeItEasy.VisualBasic">
    <Messages>
     <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Created="2009-12-25 00:06:38Z">
      <Issue>
       <Item>FakeItEasy.VisualBasic</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
  </Namespaces>
  <Targets>
   <Target Name="$(ProjectDir)/bin/Debug/FakeItEasy.dll">
    <Modules>
     <Module Name="fakeiteasy.dll">
      <Messages>
       <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Created="2009-09-05 10:55:05Z">
        <Issue Name="NoStrongName">
         <Item>'FakeItEasy.dll'</Item>
        </Issue>
       </Message>
      </Messages>
      <Namespaces>
       <Namespace Name="FakeItEasy">
        <Types>
         <Type Name="A">
          <Messages>
           <Message Id="A" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2009-12-25 00:06:38Z">
            <Issue Name="TypeMoreMeaningfulName">
             <Item>'A'</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="#CallTo`1(System.Linq.Expressions.Expression`1&lt;System.Func`1&lt;!!0&gt;&gt;)">
            <Messages>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'A.CallTo&lt;T&gt;(Expression&lt;Func&lt;T&gt;&gt;)'</Item>
               <Item>'Expression&lt;Func&lt;T&gt;&gt;'</Item>
              </Issue>
              <Notes>
               <User Name="Patrik">
                <Note Id="9" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
           <Member Name="#Dummy`1()">
            <Messages>
             <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'A.Dummy&lt;T&gt;()'</Item>
               <Item>'T'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#Equals(System.Object,System.Object)">
            <Messages>
             <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Created="2009-12-25 00:06:38Z">
              <Issue Name="LanguageIndependentMemberParameter">
               <Item>'A.Equals(object, object)'</Item>
               <Item>obj</Item>
               <Item>'objA'</Item>
              </Issue>
              <Issue Name="LanguageIndependentMemberParameter">
               <Item>'A.Equals(object, object)'</Item>
               <Item>obj</Item>
               <Item>'objB'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#Fake`1()">
            <Messages>
             <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'A.Fake&lt;T&gt;()'</Item>
               <Item>'T'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#Fake`1(System.Collections.Generic.IEnumerable`1&lt;System.Object&gt;)">
            <Messages>
             <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Created="2009-09-05 10:55:05Z">
              <Issue>
               <Item>'A.Fake&lt;T&gt;(IEnumerable&lt;object&gt;)'</Item>
               <Item>'T'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#Fake`1(System.Linq.Expressions.Expression`1&lt;System.Func`1&lt;!!0&gt;&gt;)">
            <Messages>
             <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'constructorCall'</Item>
               <Item>'A.Fake&lt;T&gt;(Expression&lt;Func&lt;T&gt;&gt;)'</Item>
               <Item>'Expression&lt;Func&lt;T&gt;&gt;'</Item>
               <Item>'LambdaExpression'</Item>
              </Issue>
             </Message>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'A.Fake&lt;T&gt;(Expression&lt;Func&lt;T&gt;&gt;)'</Item>
               <Item>'Expression&lt;Func&lt;T&gt;&gt;'</Item>
              </Issue>
              <Notes>
               <User Name="Patrik">
                <Note Id="7" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ReferenceEquals(System.Object,System.Object)">
            <Messages>
             <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Created="2009-12-25 00:06:38Z">
              <Issue Name="LanguageIndependentMemberParameter">
               <Item>'A.ReferenceEquals(object, object)'</Item>
               <Item>obj</Item>
               <Item>'objA'</Item>
              </Issue>
              <Issue Name="LanguageIndependentMemberParameter">
               <Item>'A.ReferenceEquals(object, object)'</Item>
               <Item>obj</Item>
               <Item>'objB'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="A`1">
          <Messages>
           <Message Id="A" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2009-12-25 00:06:38Z">
            <Issue Name="TypeMoreMeaningfulName">
             <Item>'A&lt;T&gt;'</Item>
            </Issue>
           </Message>
           <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Created="2009-12-25 00:06:38Z">
            <Issue>
             <Item>'A&lt;T&gt;'</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="#Ignored">
            <Messages>
             <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'A&lt;T&gt;.Ignored'</Item>
               <Item>'A&lt;T&gt;'</Item>
              </Issue>
              <Notes>
               <User Name="Patrik">
                <Note Id="8" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
           <Member Name="#That">
            <Messages>
             <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'A&lt;T&gt;.That'</Item>
               <Item>'A&lt;T&gt;'</Item>
              </Issue>
              <Notes>
               <User Name="Patrik">
                <Note Id="8" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Any">
          <Members>
           <Member Name="#Equals(System.Object,System.Object)">
            <Messages>
             <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue Name="LanguageIndependentMemberParameter">
               <Item>'Any.Equals(object, object)'</Item>
               <Item>obj</Item>
               <Item>'objA'</Item>
              </Issue>
              <Issue Name="LanguageIndependentMemberParameter">
               <Item>'Any.Equals(object, object)'</Item>
               <Item>obj</Item>
               <Item>'objB'</Item>
              </Issue>
              <Notes>
               <User Name="Patrik">
                <Note Id="2" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ReferenceEquals(System.Object,System.Object)">
            <Messages>
             <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue Name="LanguageIndependentMemberParameter">
               <Item>'Any.ReferenceEquals(object, object)'</Item>
               <Item>obj</Item>
               <Item>'objA'</Item>
              </Issue>
              <Issue Name="LanguageIndependentMemberParameter">
               <Item>'Any.ReferenceEquals(object, object)'</Item>
               <Item>obj</Item>
               <Item>'objB'</Item>
              </Issue>
              <Notes>
               <User Name="Patrik">
                <Note Id="1" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ArgumentValidationsExtensions">
          <Members>
           <Member Name="#StartsWith(FakeItEasy.Expressions.ArgumentValidatorScope`1&lt;System.String&gt;,System.String)">
            <Messages>
             <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'ArgumentValidationsExtensions.StartsWith(this ArgumentValidatorScope&lt;string&gt;, string)'</Item>
               <Item>'string.StartsWith(string)'</Item>
               <Item>'string.StartsWith(string, StringComparison)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Fake">
          <Members>
           <Member Name="#Equals(System.Object,System.Object)">
            <Messages>
             <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Created="2009-12-25 00:06:38Z">
              <Issue Name="LanguageIndependentMemberParameter">
               <Item>'Fake.Equals(object, object)'</Item>
               <Item>obj</Item>
               <Item>'objA'</Item>
              </Issue>
              <Issue Name="LanguageIndependentMemberParameter">
               <Item>'Fake.Equals(object, object)'</Item>
               <Item>obj</Item>
               <Item>'objB'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#GetFakeObject(System.Object)">
            <Messages>
             <Message Id="object" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Created="2009-12-25 00:06:38Z">
              <Issue Name="LanguageIndependentMemberParameter">
               <Item>'Fake.GetFakeObject(object)'</Item>
               <Item>Object</Item>
               <Item>'fakedObject'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ReferenceEquals(System.Object,System.Object)">
            <Messages>
             <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Created="2009-12-25 00:06:38Z">
              <Issue Name="LanguageIndependentMemberParameter">
               <Item>'Fake.ReferenceEquals(object, object)'</Item>
               <Item>obj</Item>
               <Item>'objA'</Item>
              </Issue>
              <Issue Name="LanguageIndependentMemberParameter">
               <Item>'Fake.ReferenceEquals(object, object)'</Item>
               <Item>obj</Item>
               <Item>'objB'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Fake`1">
          <Members>
           <Member Name="#.ctor(System.Linq.Expressions.Expression`1&lt;System.Func`1&lt;!0&gt;&gt;)">
            <Messages>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Excluded" Created="2009-09-05 10:55:05Z">
              <Issue>
               <Item>'Fake&lt;T&gt;.Fake(Expression&lt;Func&lt;T&gt;&gt;)'</Item>
               <Item>'Expression&lt;Func&lt;T&gt;&gt;'</Item>
              </Issue>
              <Notes>
               <User Name="Patrik">
                <Note Id="7" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
           <Member Name="#AssertWasCalled(System.Linq.Expressions.Expression`1&lt;System.Action`1&lt;!0&gt;&gt;)">
            <Messages>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'Fake&lt;T&gt;.AssertWasCalled(Expression&lt;Action&lt;T&gt;&gt;)'</Item>
               <Item>'Expression&lt;Action&lt;T&gt;&gt;'</Item>
              </Issue>
              <Notes>
               <User Name="Patrik">
                <Note Id="7" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
           <Member Name="#AssertWasCalled(System.Linq.Expressions.Expression`1&lt;System.Action`1&lt;!0&gt;&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;System.Int32,System.Boolean&gt;&gt;)">
            <Messages>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'Fake&lt;T&gt;.AssertWasCalled(Expression&lt;Action&lt;T&gt;&gt;, Expression&lt;Func&lt;int, bool&gt;&gt;)'</Item>
               <Item>'Expression&lt;Action&lt;T&gt;&gt;'</Item>
              </Issue>
              <Issue>
               <Item>'Fake&lt;T&gt;.AssertWasCalled(Expression&lt;Action&lt;T&gt;&gt;, Expression&lt;Func&lt;int, bool&gt;&gt;)'</Item>
               <Item>'Expression&lt;Func&lt;int, bool&gt;&gt;'</Item>
              </Issue>
              <Notes>
               <User Name="Patrik">
                <Note Id="7" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
           <Member Name="#AssertWasCalled`1(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!0,!!0&gt;&gt;)">
            <Messages>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'Fake&lt;T&gt;.AssertWasCalled&lt;TMember&gt;(Expression&lt;Func&lt;T, TMember&gt;&gt;)'</Item>
               <Item>'Expression&lt;Func&lt;T, TMember&gt;&gt;'</Item>
              </Issue>
              <Notes>
               <User Name="Patrik">
                <Note Id="7" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
           <Member Name="#AssertWasCalled`1(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!0,!!0&gt;&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;System.Int32,System.Boolean&gt;&gt;)">
            <Messages>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'Fake&lt;T&gt;.AssertWasCalled&lt;TMember&gt;(Expression&lt;Func&lt;T, TMember&gt;&gt;, Expression&lt;Func&lt;int, bool&gt;&gt;)'</Item>
               <Item>'Expression&lt;Func&lt;T, TMember&gt;&gt;'</Item>
              </Issue>
              <Issue>
               <Item>'Fake&lt;T&gt;.AssertWasCalled&lt;TMember&gt;(Expression&lt;Func&lt;T, TMember&gt;&gt;, Expression&lt;Func&lt;int, bool&gt;&gt;)'</Item>
               <Item>'Expression&lt;Func&lt;int, bool&gt;&gt;'</Item>
              </Issue>
              <Notes>
               <User Name="Patrik">
                <Note Id="7" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
           <Member Name="#CallsTo`1(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!0,!!0&gt;&gt;)">
            <Messages>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Excluded" Created="2009-09-05 10:55:05Z">
              <Issue>
               <Item>'Fake&lt;T&gt;.CallsTo&lt;TMember&gt;(Expression&lt;Func&lt;T, TMember&gt;&gt;)'</Item>
               <Item>'Expression&lt;Func&lt;T, TMember&gt;&gt;'</Item>
              </Issue>
              <Notes>
               <User Name="Patrik">
                <Note Id="7" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ICallCollection`1">
          <Members>
           <Member Name="#Matching(System.Linq.Expressions.Expression`1&lt;System.Action`1&lt;!0&gt;&gt;)">
            <Messages>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'ICallCollection&lt;TFake&gt;.Matching(Expression&lt;Action&lt;TFake&gt;&gt;)'</Item>
               <Item>'Expression&lt;Action&lt;TFake&gt;&gt;'</Item>
              </Issue>
              <Notes>
               <User Name="Patrik">
                <Note Id="7" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
           <Member Name="#Matching`1(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!0,!!0&gt;&gt;)">
            <Messages>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'ICallCollection&lt;TFake&gt;.Matching&lt;TReturn&gt;(Expression&lt;Func&lt;TFake, TReturn&gt;&gt;)'</Item>
               <Item>'Expression&lt;Func&lt;TFake, TReturn&gt;&gt;'</Item>
              </Issue>
              <Notes>
               <User Name="Patrik">
                <Note Id="7" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ICallCollectionFactory">
          <Members>
           <Member Name="#CreateCallCollection`1(FakeItEasy.Api.FakeObject)">
            <Messages>
             <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'ICallCollectionFactory.CreateCallCollection&lt;TFake&gt;(FakeObject)'</Item>
               <Item>'TFake'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Raise">
          <Members>
           <Member Name="#With`1(System.Object,!!0)">
            <Messages>
             <Message TypeName="ReviewVisibleEventHandlers" Category="Microsoft.Security" CheckId="CA2109" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'Raise.With&lt;TEventArgs&gt;(object, TEventArgs)'</Item>
              </Issue>
              <Notes>
               <User Name="Patrik">
                <Note Id="3" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Raise`1">
          <Members>
           <Member Name="#Now(System.Object,!0)">
            <Messages>
             <Message TypeName="ReviewVisibleEventHandlers" Category="Microsoft.Security" CheckId="CA2109" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'Raise&lt;TEventArgs&gt;.Now(object, TEventArgs)'</Item>
              </Issue>
              <Notes>
               <User Name="Patrik">
                <Note Id="3" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="FakeItEasy.Api">
        <Types>
         <Type Name="ArgumentCollection">
          <Messages>
           <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Created="2009-12-25 00:06:38Z">
            <Issue Name="TypeNoAlternate">
             <Item>'ArgumentCollection'</Item>
             <Item>Collection</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="#Get`1(System.Int32)">
            <Messages>
             <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'ArgumentCollection.Get&lt;T&gt;(int)'</Item>
               <Item>'T'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#Get`1(System.String)">
            <Messages>
             <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'ArgumentCollection.Get&lt;T&gt;(string)'</Item>
               <Item>'T'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="CallWriter">
          <Members>
           <Member Name="#AppendCallList(System.String,System.Collections.Generic.IEnumerable`1&lt;FakeItEasy.Api.IFakeObjectCall&gt;,System.IO.TextWriter)">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2009-12-25 00:06:38Z" FixCategory="NonBreaking">
              <Issue>
               <Item>'CallWriter.AppendCallList(string, IEnumerable&lt;IFakeObjectCall&gt;, TextWriter)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="DelegateFakeObjectContainer">
          <Members>
           <Member Name="#ConfigureFake(System.Type,System.Object)">
            <Messages>
             <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'DelegateFakeObjectContainer.ConfigureFake(Type, object)'</Item>
               <Item>'typeOfFake'</Item>
               <Item>'typeOfFakeObject'</Item>
               <Item>'IFakeObjectContainer.ConfigureFake(Type, object)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="FakeObject">
          <Members>
           <Member Name="#ApplyRule(FakeItEasy.Api.CallRuleMetadata,FakeItEasy.Api.IWritableFakeObjectCall)">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2009-12-25 00:06:38Z" FixCategory="NonBreaking">
              <Issue>
               <Item>'FakeObject.ApplyRule(CallRuleMetadata, IWritableFakeObjectCall)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="FakeObject+AutoFakePropertyRule">
          <Members>
           <Member Name="#Factory">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2009-12-25 00:06:38Z" FixCategory="NonBreaking">
              <Issue>
               <Item>'FakeObject.AutoFakePropertyRule.Factory'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#TypeIsFakable(System.Type)">
            <Messages>
             <Message Id="ex" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'FakeObject.AutoFakePropertyRule.TypeIsFakable(Type)'</Item>
               <Item>'ex'</Item>
               <Item>'ArgumentException'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="FakeObject+EventRule">
          <Messages>
           <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Created="2009-12-25 00:06:38Z" FixCategory="NonBreaking">
            <Issue Name="NonBreaking">
             <Item>'FakeObject.EventRule'</Item>
             <Item>'EventHandlerList'</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="FakeObject+Factory">
          <Messages>
           <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Created="2009-12-25 00:06:38Z">
            <Issue>
             <Item>'FakeObject.Factory'</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="FakeScope+RootScope">
          <Members>
           <Member Name="#TryLoadMefContainer()">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2009-12-25 00:06:38Z" FixCategory="NonBreaking">
              <Issue>
               <Item>'FakeScope.RootScope.TryLoadMefContainer()'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ICallMatcher">
          <Members>
           <Member Name="#Matches(FakeItEasy.Api.IFakeObjectCall)">
            <Messages>
             <Message Id="Call" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Created="2009-12-25 00:06:38Z">
              <Issue Name="MemberParameter">
               <Item>'ICallMatcher.Matches(IFakeObjectCall)'</Item>
               <Item>'call'</Item>
               <Item>Call</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="IFakedProxy">
          <Members>
           <Member Name="#GetFakeObject()">
            <Messages>
             <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Created="2009-12-25 00:06:38Z">
              <Issue Certainty="50">
               <Item>'IFakedProxy.GetFakeObject()'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="IFakeObjectContainer">
          <Members>
           <Member Name="#ConfigureFake(System.Type,System.Object)">
            <Messages>
             <Message Id="object" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Created="2009-12-25 00:06:38Z">
              <Issue Name="LanguageIndependentMemberParameter">
               <Item>'IFakeObjectContainer.ConfigureFake(Type, object)'</Item>
               <Item>Object</Item>
               <Item>'fakeObject'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#TryCreateFakeObject(System.Type,System.Object&amp;)">
            <Messages>
             <Message TypeName="UseGenericsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1007" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'IFakeObjectContainer.TryCreateFakeObject(Type, out object)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="MethodInfoManager+TypeMethodInfoPair">
          <Members>
           <Member Name="#Equals(System.Object)">
            <Messages>
             <Message TypeName="OverloadOperatorEqualsOnOverridingValueTypeEquals" Category="Microsoft.Usage" CheckId="CA2231" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'MethodInfoManager.TypeMethodInfoPair'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ProxyResult">
          <Members>
           <Member Name="#.ctor(System.Type)">
            <Messages>
             <Message Id="proxied" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2009-12-25 00:06:38Z">
              <Issue Name="MemberParameter">
               <Item>'ProxyResult.ProxyResult(Type)'</Item>
               <Item>proxied</Item>
               <Item>'proxiedType'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#ProxiedType">
            <Messages>
             <Message Id="Proxied" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2009-12-25 00:06:38Z">
              <Issue Name="Member">
               <Item>Proxied</Item>
               <Item>'ProxyResult.ProxiedType'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="FakeItEasy.Assertion">
        <Types>
         <Type Name="IFakeAssertions`1">
          <Members>
           <Member Name="#WasCalled(System.Linq.Expressions.Expression`1&lt;System.Action`1&lt;!0&gt;&gt;)">
            <Messages>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'IFakeAssertions&lt;TFake&gt;.WasCalled(Expression&lt;Action&lt;TFake&gt;&gt;)'</Item>
               <Item>'Expression&lt;Action&lt;TFake&gt;&gt;'</Item>
              </Issue>
              <Notes>
               <User Name="Patrik">
                <Note Id="4" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
           <Member Name="#WasCalled(System.Linq.Expressions.Expression`1&lt;System.Action`1&lt;!0&gt;&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;System.Int32,System.Boolean&gt;&gt;)">
            <Messages>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'IFakeAssertions&lt;TFake&gt;.WasCalled(Expression&lt;Action&lt;TFake&gt;&gt;, Expression&lt;Func&lt;int, bool&gt;&gt;)'</Item>
               <Item>'Expression&lt;Action&lt;TFake&gt;&gt;'</Item>
              </Issue>
              <Issue>
               <Item>'IFakeAssertions&lt;TFake&gt;.WasCalled(Expression&lt;Action&lt;TFake&gt;&gt;, Expression&lt;Func&lt;int, bool&gt;&gt;)'</Item>
               <Item>'Expression&lt;Func&lt;int, bool&gt;&gt;'</Item>
              </Issue>
              <Notes>
               <User Name="Patrik">
                <Note Id="4" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
           <Member Name="#WasCalled`1(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!0,!!0&gt;&gt;)">
            <Messages>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'IFakeAssertions&lt;TFake&gt;.WasCalled&lt;TMember&gt;(Expression&lt;Func&lt;TFake, TMember&gt;&gt;)'</Item>
               <Item>'Expression&lt;Func&lt;TFake, TMember&gt;&gt;'</Item>
              </Issue>
              <Notes>
               <User Name="Patrik">
                <Note Id="4" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
           <Member Name="#WasCalled`1(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!0,!!0&gt;&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;System.Int32,System.Boolean&gt;&gt;)">
            <Messages>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'IFakeAssertions&lt;TFake&gt;.WasCalled&lt;TMember&gt;(Expression&lt;Func&lt;TFake, TMember&gt;&gt;, Expression&lt;Func&lt;int, bool&gt;&gt;)'</Item>
               <Item>'Expression&lt;Func&lt;TFake, TMember&gt;&gt;'</Item>
              </Issue>
              <Issue>
               <Item>'IFakeAssertions&lt;TFake&gt;.WasCalled&lt;TMember&gt;(Expression&lt;Func&lt;TFake, TMember&gt;&gt;, Expression&lt;Func&lt;int, bool&gt;&gt;)'</Item>
               <Item>'Expression&lt;Func&lt;int, bool&gt;&gt;'</Item>
              </Issue>
              <Notes>
               <User Name="Patrik">
                <Note Id="4" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
           <Member Name="#WasNotCalled(System.Linq.Expressions.Expression`1&lt;System.Action`1&lt;!0&gt;&gt;)">
            <Messages>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'IFakeAssertions&lt;TFake&gt;.WasNotCalled(Expression&lt;Action&lt;TFake&gt;&gt;)'</Item>
               <Item>'Expression&lt;Action&lt;TFake&gt;&gt;'</Item>
              </Issue>
              <Notes>
               <User Name="Patrik">
                <Note Id="4" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
           <Member Name="#WasNotCalled`1(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!0,!!0&gt;&gt;)">
            <Messages>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'IFakeAssertions&lt;TFake&gt;.WasNotCalled&lt;TMember&gt;(Expression&lt;Func&lt;TFake, TMember&gt;&gt;)'</Item>
               <Item>'Expression&lt;Func&lt;TFake, TMember&gt;&gt;'</Item>
              </Issue>
              <Notes>
               <User Name="Patrik">
                <Note Id="4" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="IFakeAssertionsFactory">
          <Members>
           <Member Name="#CreateAsserter`1(FakeItEasy.Api.FakeObject)">
            <Messages>
             <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'IFakeAssertionsFactory.CreateAsserter&lt;TFake&gt;(FakeObject)'</Item>
               <Item>'TFake'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="FakeItEasy.Configuration">
        <Types>
         <Type Name="IAfterCallSpecifiedWithOutAndRefParametersConfiguration">
          <Messages>
           <Message Id="WithOut" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Excluded" Created="2009-12-25 00:06:38Z">
            <Issue Name="TypeShouldBeDiscreteTerm">
             <Item>WithOut</Item>
             <Item>'IAfterCallSpecifiedWithOutAndRefParametersConfiguration'</Item>
             <Item>Without</Item>
            </Issue>
            <Notes>
             <User Name="Patrik">
              <Note Id="5" />
             </User>
            </Notes>
           </Message>
          </Messages>
         </Type>
         <Type Name="IAnyCallConfiguration">
          <Members>
           <Member Name="#WithReturnType`1()">
            <Messages>
             <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'IAnyCallConfiguration.WithReturnType&lt;TMember&gt;()'</Item>
               <Item>'TMember'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="IHideObjectMembers">
          <Members>
           <Member Name="#Equals(System.Object)">
            <Messages>
             <Message Id="o" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2009-12-25 00:06:38Z">
              <Issue Name="MemberParameterMoreMeaningfulName">
               <Item>'IHideObjectMembers.Equals(object)'</Item>
               <Item>'o'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#GetType()">
            <Messages>
             <Message Id="GetType" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Created="2009-12-25 00:06:38Z">
              <Issue Name="Member">
               <Item>'IHideObjectMembers.GetType()'</Item>
               <Item>GetType</Item>
              </Issue>
             </Message>
             <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Created="2009-12-25 00:06:38Z">
              <Issue Certainty="50">
               <Item>'IHideObjectMembers.GetType()'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="IStartConfiguration`1">
          <Members>
           <Member Name="#CallsTo(System.Linq.Expressions.Expression`1&lt;System.Action`1&lt;!0&gt;&gt;)">
            <Messages>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'IStartConfiguration&lt;TFake&gt;.CallsTo(Expression&lt;Action&lt;TFake&gt;&gt;)'</Item>
               <Item>'Expression&lt;Action&lt;TFake&gt;&gt;'</Item>
              </Issue>
              <Notes>
               <User Name="Patrik">
                <Note Id="6" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
           <Member Name="#CallsTo`1(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!0,!!0&gt;&gt;)">
            <Messages>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Excluded" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'IStartConfiguration&lt;TFake&gt;.CallsTo&lt;TMember&gt;(Expression&lt;Func&lt;TFake, TMember&gt;&gt;)'</Item>
               <Item>'Expression&lt;Func&lt;TFake, TMember&gt;&gt;'</Item>
              </Issue>
              <Notes>
               <User Name="Patrik">
                <Note Id="6" />
               </User>
              </Notes>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="FakeItEasy.DynamicProxy">
        <Types>
         <Type Name="DynamicProxyProxyGenerator">
          <Members>
           <Member Name="#TryGenerateProxy(System.Type,FakeItEasy.Api.FakeObject,FakeItEasy.Api.IFakeObjectContainer,FakeItEasy.Api.ProxyResult&amp;)">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2009-12-25 00:06:38Z" FixCategory="NonBreaking">
              <Issue>
               <Item>'DynamicProxyProxyGenerator.TryGenerateProxy(Type, FakeObject, IFakeObjectContainer, out ProxyResult)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#TryGenerateProxy(System.Type,FakeItEasy.Api.FakeObject,System.Collections.Generic.IEnumerable`1&lt;System.Object&gt;,FakeItEasy.Api.ProxyResult&amp;)">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2009-12-25 00:06:38Z" FixCategory="NonBreaking">
              <Issue>
               <Item>'DynamicProxyProxyGenerator.TryGenerateProxy(Type, FakeObject, IEnumerable&lt;object&gt;, out ProxyResult)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="DynamicProxyProxyGenerator+ConstructorResolvingProxyGenerationRequest">
          <Members>
           <Member Name="#TryCreateProxiedArgument(System.Type,FakeItEasy.Api.IFakeObjectContainer,System.Object&amp;)">
            <Messages>
             <Message Id="container" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2009-12-25 00:06:38Z" FixCategory="NonBreaking">
              <Issue>
               <Item>'container'</Item>
               <Item>'DynamicProxyProxyGenerator.ConstructorResolvingProxyGenerationRequest.TryCreateProxiedArgument(Type, IFakeObjectContainer, out object)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="FakeItEasy.Expressions">
        <Types>
         <Type Name="ArgumentValidator`1">
          <Members>
           <Member Name="#Create(FakeItEasy.Expressions.ArgumentValidatorScope`1&lt;!0&gt;,System.Func`2&lt;!0,System.Boolean&gt;,System.String)">
            <Messages>
             <Message TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'ArgumentValidator&lt;T&gt;.Create(ArgumentValidatorScope&lt;T&gt;, Func&lt;T, bool&gt;, string)'</Item>
               <Item>'ArgumentValidator&lt;T&gt;'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#op_Implicit(FakeItEasy.Expressions.ArgumentValidator`1&lt;!0&gt;):!0">
            <Messages>
             <Message Id="validator" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Created="2009-12-25 00:06:38Z" FixCategory="DependsOnFix">
              <Issue>
               <Item>'validator'</Item>
               <Item>'ArgumentValidator&lt;T&gt;.implicit operator T(ArgumentValidator&lt;T&gt;)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ArgumentValidatorExtensions">
          <Members>
           <Member Name="#Or`1(FakeItEasy.Expressions.ArgumentValidator`1&lt;!!0&gt;,System.Func`2&lt;FakeItEasy.Expressions.ArgumentValidatorScope`1&lt;!!0&gt;,FakeItEasy.Expressions.ArgumentValidator`1&lt;!!0&gt;&gt;)">
            <Messages>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'ArgumentValidatorExtensions.Or&lt;T&gt;(this ArgumentValidator&lt;T&gt;, Func&lt;ArgumentValidatorScope&lt;T&gt;, ArgumentValidator&lt;T&gt;&gt;)'</Item>
               <Item>'Func&lt;ArgumentValidatorScope&lt;T&gt;, ArgumentValidator&lt;T&gt;&gt;'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ArgumentValidatorScope`1">
          <Members>
           <Member Name="#IsInstanceOf`1()">
            <Messages>
             <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'ArgumentValidatorScope&lt;T&gt;.IsInstanceOf&lt;TType&gt;()'</Item>
               <Item>'TType'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="FakeItEasy.ExtensionSyntax.Full">
        <Types>
         <Type Name="FullExtensionSyntax">
          <Members>
           <Member Name="#CallsTo`1(!!0,System.Linq.Expressions.Expression`1&lt;System.Action`1&lt;!!0&gt;&gt;)">
            <Messages>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'FullExtensionSyntax.CallsTo&lt;TFake&gt;(this TFake, Expression&lt;Action&lt;TFake&gt;&gt;)'</Item>
               <Item>'Expression&lt;Action&lt;TFake&gt;&gt;'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#CallsTo`2(!!0,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,!!1&gt;&gt;)">
            <Messages>
             <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'FullExtensionSyntax.CallsTo&lt;TFake, TMember&gt;(this TFake, Expression&lt;Func&lt;TFake, TMember&gt;&gt;)'</Item>
               <Item>'Expression&lt;Func&lt;TFake, TMember&gt;&gt;'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="FakeItEasy.SelfInitializedFakes">
        <Types>
         <Type Name="ISelfInitializingFakeRecorder">
          <Members>
           <Member Name="#ApplyNext(FakeItEasy.Api.IWritableFakeObjectCall)">
            <Messages>
             <Message Id="Call" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Created="2009-12-25 00:06:38Z">
              <Issue Name="MemberParameter">
               <Item>'ISelfInitializingFakeRecorder.ApplyNext(IWritableFakeObjectCall)'</Item>
               <Item>'call'</Item>
               <Item>Call</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#RecordCall(FakeItEasy.Api.ICompletedFakeObjectCall)">
            <Messages>
             <Message Id="Call" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Created="2009-12-25 00:06:38Z">
              <Issue Name="MemberParameter">
               <Item>'ISelfInitializingFakeRecorder.RecordCall(ICompletedFakeObjectCall)'</Item>
               <Item>'call'</Item>
               <Item>Call</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="RecordingManager">
          <Messages>
           <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Created="2009-12-25 00:06:38Z">
            <Issue Name="ProvideDisposeBool">
             <Item>'RecordingManager'</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="#Dispose()">
            <Messages>
             <Message TypeName="CallGCSuppressFinalizeCorrectly" Category="Microsoft.Usage" CheckId="CA1816" Created="2009-12-25 00:06:38Z">
              <Issue Name="NotCalled">
               <Item>'RecordingManager.Dispose()'</Item>
               <Item>'GC.SuppressFinalize(object)'</Item>
              </Issue>
             </Message>
             <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Created="2009-12-25 00:06:38Z">
              <Issue Name="DisposeImplementation">
               <Item>'RecordingManager.Dispose()'</Item>
              </Issue>
              <Issue Name="DisposeSignature">
               <Item>'RecordingManager.Dispose()'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="RecordingManager+CallDataMetadata">
          <Members>
           <Member Name="#.ctor()">
            <Messages>
             <Message TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805" Created="2009-12-25 00:06:38Z">
              <Issue>
               <Item>'RecordingManager.CallDataMetadata.CallDataMetadata()'</Item>
               <Item>'RecordingManager.CallDataMetadata.HasBeenApplied'</Item>
               <Item>'bool'</Item>
               <Item>false</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
      </Namespaces>
     </Module>
    </Modules>
   </Target>
  </Targets>
  <Notes>
   <User Name="Patrik">
    <Note Id="0" Modified="2009-09-07 22:25:01Z">Must be a namespace of it's own in order to control if the extensions should be used or not.</Note>
    <Note Id="1" Modified="2009-12-25 00:08:18Z">Uses the same names as the hidden method.</Note>
    <Note Id="2" Modified="2009-12-25 00:08:31Z">Uses the same names as the hidden methods.</Note>
    <Note Id="3" Modified="2009-12-25 00:08:55Z">By design, must be this way in order to use it to raise events.</Note>
    <Note Id="4" Modified="2009-12-25 00:11:32Z">By design.</Note>
    <Note Id="5" Modified="2009-12-25 00:11:58Z">Means "with out", not "without".</Note>
    <Note Id="6" Modified="2009-12-25 00:12:40Z">By design.</Note>
    <Note Id="7" Modified="2009-12-25 00:12:52Z">By design.</Note>
    <Note Id="8" Modified="2009-12-25 00:13:49Z">By design, this is a special case since the type parameter is used to display the type of the argument.</Note>
    <Note Id="9" Modified="2009-12-25 00:14:20Z">By design.</Note>
   </User>
  </Notes>
  <Rules>
   <Rule TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210">
    <Resolution Name="NoStrongName">Sign {0} with a strong name key.</Resolution>
   </Rule>
   <Rule TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020">
    <Resolution Name="Default">Consider merging the types defined in '{0}' with another namespace.</Resolution>
   </Rule>
   <Rule TypeName="CallGCSuppressFinalizeCorrectly" Category="Microsoft.Usage" CheckId="CA1816">
    <Resolution Name="NotCalled">Change {0} to call {1}. This will prevent unnecessary finalization of the object once it has been disposed and it has fallen out of scope.</Resolution>
   </Rule>
   <Rule TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702">
    <Resolution Name="TypeShouldBeDiscreteTerm">The compound word '{0}' in type name {1} exists as a discrete term. If your usage is intended to be single word, case it as '{2}'.</Resolution>
   </Rule>
   <Rule TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011">
    <Resolution Name="Default">Consider changing the type of parameter {0} in {1} from {2} to its base type {3}. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Resolution>
   </Rule>
   <Rule TypeName="DoNotDeclareStaticMembersOnGenericTypes" Category="Microsoft.Design" CheckId="CA1000">
    <Resolution Name="Default">Remove {0} from {1} or make it an instance member.</Resolution>
   </Rule>
   <Rule TypeName="DoNotInitializeUnnecessarily" Category="Microsoft.Performance" CheckId="CA1805">
    <Resolution Name="Default">{0} initializes field {1} of type {2} to {3}. Remove this initialization because it will be done automatically by the runtime.</Resolution>
   </Rule>
   <Rule TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006">
    <Resolution Name="Default">Consider a design where {0} doesn't nest generic type {1}.</Resolution>
   </Rule>
   <Rule TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004">
    <Resolution Name="Default">Consider a design where {0} doesn't require explicit type parameter {1} in any call to it.</Resolution>
   </Rule>
   <Rule TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704">
    <Resolution Name="Member">Correct the spelling of '{0}' in member name {1} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
    <Resolution Name="MemberParameter">In method {0}, correct the spelling of '{1}' in parameter name {2} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
    <Resolution Name="MemberParameterMoreMeaningfulName">In method {0}, consider providing a more meaningful name than parameter name {1}.</Resolution>
    <Resolution Name="TypeMoreMeaningfulName">Consider providing a more meaningful name than type name {0}.</Resolution>
   </Rule>
   <Rule TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720">
    <Resolution Name="LanguageIndependentMemberParameter">In member {0}, consider replacing the data type identifier '{1}' in parameter name {2} with a more generic term, such as 'value'.</Resolution>
   </Rule>
   <Rule TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711">
    <Resolution Name="TypeNoAlternate">Rename type name {0} so that it does not end in '{1}'.</Resolution>
   </Rule>
   <Rule TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716">
    <Resolution Name="Member">Rename virtual/interface member {0} so that it no longer conflicts with the reserved language keyword '{1}'. Using a reserved keyword as the name of a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Resolution>
    <Resolution Name="MemberParameter">In virtual/interface member {0}, rename parameter {1} so that it no longer conflicts with the reserved language keyword '{2}'. Using a reserved keyword as the name of a parameter on a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Resolution>
   </Rule>
   <Rule TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063">
    <Resolution Name="DisposeImplementation">Modify {0} so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Resolution>
    <Resolution Name="DisposeSignature">Ensure that {0} is declared as public and sealed.</Resolution>
    <Resolution Name="ProvideDisposeBool">Provide an overridable implementation of Dispose(bool) on {0} or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Resolution>
   </Rule>
   <Rule TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822">
    <Resolution Name="Default">The 'this' parameter (or 'Me' in Visual Basic) of {0} is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Resolution>
   </Rule>
   <Rule TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034">
    <Resolution Name="Default">Do not nest type {0}. Alternatively, change its accessibility so that it is not externally visible.</Resolution>
   </Rule>
   <Rule TypeName="OverloadOperatorEqualsOnOverridingValueTypeEquals" Category="Microsoft.Usage" CheckId="CA2231">
    <Resolution Name="Default">Because {0} is a value type that overrides ValueType.Equals, it should also overload the equality and inequality operators (== and !=).</Resolution>
   </Rule>
   <Rule TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725">
    <Resolution Name="Default">In member {0}, change parameter name {1} to {2} in order to match the identifier as it has been declared in {3}.</Resolution>
   </Rule>
   <Rule TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804">
    <Resolution Name="Default">{0} declares a variable, {1}, of type {2}, which is never used or is only assigned to. Use this variable or remove it.</Resolution>
   </Rule>
   <Rule TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801">
    <Resolution Name="Default">Parameter {0} of {1} is never used. Remove the parameter or use it in the method body.</Resolution>
   </Rule>
   <Rule TypeName="ReviewVisibleEventHandlers" Category="Microsoft.Security" CheckId="CA2109">
    <Resolution Name="Default">Consider making {0} not externally visible.</Resolution>
   </Rule>
   <Rule TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307">
    <Resolution Name="Default">{0} makes a call to {1} that does not explicitly provide a StringComparison. This should be replaced with a call to {2}.</Resolution>
   </Rule>
   <Rule TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053">
    <Resolution Name="Default">Remove the public constructors from {0}.</Resolution>
   </Rule>
   <Rule TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001">
    <Resolution Name="NonBreaking">Implement IDisposable on {0} because it creates members of the following IDisposable types: {1}.</Resolution>
   </Rule>
   <Rule TypeName="UseGenericsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1007">
    <Resolution Name="Default">Consider using generics instead of a reference to System.Object in {0}.</Resolution>
   </Rule>
   <Rule TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024">
    <Resolution Name="Default">Change {0} to a property if appropriate.</Resolution>
   </Rule>
  </Rules>
 </FxCopReport>
</FxCopProject>
