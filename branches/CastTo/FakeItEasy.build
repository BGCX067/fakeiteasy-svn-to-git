<?xml version="1.0" encoding="utf-8" ?>
<Project DefaultTargets="Distrib" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<!-- Based on script from http://autofac.org" -->
	<Import Project="Libraries\Build\MSBuild.Community.Tasks.targets" />
	<PropertyGroup>
		<!--
			 Primary configuration properties (override them via command line
			 if needed
		-->
		<BuildPath Condition="$(BuildPath)==''">Build</BuildPath>
		<Configuration Condition="$(Configuration)==''">Release</Configuration>
		<BuildFramework></BuildFramework>
		<AllowPartiallyTrustedCallers Condition="$(AllowPartiallyTrustedCallers)==''">true</AllowPartiallyTrustedCallers>
		<VersionNumber>10</VersionNumber>
		<!--
			Derived configuration properties
		 -->
		<PackageDirectory Condition="$(PackageDirectory)==''">$(BuildPath)</PackageDirectory>
		<BinariesPath>$(BuildPath)\Binaries</BinariesPath>
		<LicensePath>$(BuildPath)\License</LicensePath>
		
		<BinariesSource>Source\FakeItEasy.BackwardsCompatibility\bin\$(Configuration)</BinariesSource>
		<ProjectName>$(MSBuildProjectName)</ProjectName>
	</PropertyGroup>

	<!-- 
	 Solution redirects. Every VS project normally knows how to support these targets
	-->
	<Target Name="Build">
		<MSBuild Projects="Source\$(ProjectName).sln" Targets="Build" Properties="Configuration=$(Configuration)$(BuildFramework);BuildConstants=$(BuildConstants);MSBuildTargets=$(BuildTargets)"/>
	</Target>

	<Target Name="Clean">
		<MSBuild Projects="Source\$(ProjectName).sln" Targets="Clean" Properties="Configuration=$(Configuration)$(BuildFramework);BuildConstants=$(BuildConstants);MSBuildTargets=$(BuildTargets)" />

		<CreateItem Include="**/Debug/**/*.*;**/Release/**/*.*">
			<Output ItemName="_binaryFiles" TaskParameter="Include"/>
		</CreateItem>
		<Delete Files="@(_binaryFiles)" TreatErrorsAsWarnings="true"/>
		<RemoveDir Directories="$(BuildPath)" />
	</Target>

	<Target Name="Rebuild" DependsOnTargets="UpdateVersion;Clean;Build;" />
	
	<Target Name="CreateVersionNumber">
		<Version VersionFile=".\Resources\Build\VersionNumber.txt" BuildType="Automatic" RevisionType="Increment" >
			<Output TaskParameter="Major" PropertyName="Major" />
			<Output TaskParameter="Minor" PropertyName="Minor" />
			<Output TaskParameter="Build" PropertyName="Build" />
			<Output TaskParameter="Revision" PropertyName="Revision" />
		</Version>
		<CreateProperty Value="$(Major).$(Minor).$(Build).$(Revision)">
			<Output TaskParameter="Value" PropertyName="VersionNumber" />
		</CreateProperty>
	</Target>
	
	<Target Name="UpdateVersion" DependsOnTargets="CreateVersionNumber">
		<CreateItem Include="**\SharedAssemblyInfo.cs">
			<Output ItemName="UpdateVersionPaths" TaskParameter="Include"/>
		</CreateItem>
		<CreateItem Include="@(UpdateVersionPaths->'%(SubFolder)%(RecursiveDir)VersionAssemblyInfo.cs')">
			<Output ItemName="UpdateVersionFiles" TaskParameter="Include"/>
		</CreateItem>
		<Time Format="u">
			<Output TaskParameter="FormattedTime" PropertyName="BuildTime" />
		</Time>
		
		<AssemblyInfo OutputFile="%(UpdateVersionFiles.FullPath)" CodeLanguage="CS"
			AssemblyVersion="$(VersionNumber)"
			AssemblyFileVersion="$(VersionNumber)"
			AssemblyConfiguration="$(Configuration) built on $(BuildTime)" 
		/>
	</Target>
	
	<Target Name="WipeResources">
		<!--Wipe old version files-->
		<CreateItem Include="**\VersionAssemblyInfo.cs">
			<Output ItemName="UpdateVersionPaths" TaskParameter="Include"/>
		</CreateItem>
		<Delete Files="@(UpdateVersionPaths)" />
	</Target>
	
	<!--
	 Copies built items to the distrib directory
	 -->
	<Target Name="Copy" DependsOnTargets="Build">
		<MakeDir Directories="$(BuildPath);"/>
		<MakeDir Directories="$(BinariesPath)\Temp;" />
		
		<!--Libraries-->
		<CreateItem Include="$(BinariesSource)\*.*;">
			<Output ItemName="unmergedFiles" TaskParameter="Include"/>
		</CreateItem>
		
		<!--Licenses-->
		<CreateItem Include="*License.txt">
			<Output ItemName="licenseFiles" TaskParameter="Include"/>
		</CreateItem>
		
		<Copy SourceFiles="@(licenseFiles)" DestinationFolder="$(LicensePath)" />
		<Copy SourceFiles="@(unmergedFiles)" DestinationFolder="$(BinariesPath)\Temp" />
		
		<CreateItem Include="$(BinariesPath)\Temp\FakeItEasy.dll;$(BinariesPath)\Temp\Castle.Core.dll;$(BinariesPath)\Temp\Castle.DynamicProxy2.dll">
			<Output ItemName="binariesToMerge" TaskParameter="Include"/>
		</CreateItem>
		
		<Exec Command="&quot;Libraries\Ilmerge\Ilmerge.exe&quot; /out:&quot;$(BinariesPath)\$(ProjectName).dll&quot; @(binariesToMerge, ' ')"/>
		<Delete Files="@(binariesToMerge)" />
		
		<CreateItem Include="$(BinariesPath)\Temp\*.*;">
			<Output ItemName="temporaryFiles" TaskParameter="Include" />
		</CreateItem>
		
		<Copy SourceFiles="@(temporaryFiles)" DestinationFolder="$(BinariesPath)" />
		
		<RemoveDir Directories="$(BinariesPath)\Temp" />
		
		<CreateItem Include="$(BinariesPath)\*.pdb;">
			<Output ItemName="pdbFiles" TaskParameter="Include" />
		</CreateItem>
		
		<Delete Files="@(pdbFiles)" />
	</Target>
	
	<Target Name="Distrib" DependsOnTargets="ReBuild;Copy">
		<MakeDir Directories="$(PackageDirectory)" />

		<!-- Archive-->
		<CreateItem Include="$(BinariesPath)\*.*;$(LicensePath)\*.*">
			<Output ItemName="_libFiles" TaskParameter="Include" />
		</CreateItem>
		<Zip Files="@(_libFiles)" ZipFileName="$(PackageDirectory)\$(ProjectName)-$(VersionNumber).zip" Flatten="true" WorkingDirectory="$(BuildPath)" />
	</Target>
</Project>
